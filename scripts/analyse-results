#!/usr/bin/env python

"""Analyse the results of a demo."""

from pathlib import Path
import re
import pickle
import numpy as np
import pandas as pd
import altair as alt
from dynlearn import demo, optimiser as opt

RESULTS_RE = re.compile('(.+)-results')


results_dir = Path('results')
result_paths = [results_dir / 'nanog50-random-10-20-40-123456-1000-results.pkl',
                results_dir / 'nanog50-Powell-10-20-30-123456-1000-results.pkl',
                results_dir / 'nanog50-Bayesian-10-20-20-123456-1000-results.pkl',
                results_dir / 'nanog50-active-10-20-5-123456-1000-results.pkl', ]

_losses = dict()
for result_path in result_paths:
    results = pickle.load(result_path.open('rb'))
    tag = RESULTS_RE.match(result_path.with_suffix('').name).group(1)
    args = demo.args_from_tag(tag)
    results.keys()
    sim, loss_fn, gp, knots, knot_values, plot_args = demo.setup(args)
    target = opt.OptimisationTarget(sim, loss_fn, knots)
    losses_raw = [target.loss_from_tracks(tracks) for tracks in results['history']]
    losses_best = list(opt.min_so_far(losses_raw))
    _losses[f'{args.optimiser}_raw'] = pd.Series(losses_raw)
    _losses[args.optimiser] = pd.Series(losses_best)

losses = pd.DataFrame(_losses)
losses.index.name = 'experiments'
losses = losses.reset_index()
losses
losses.columns

# Melt losses to make chart
losses_chart = (
    losses
    .loc[:, ~ losses.columns.str.endswith('_raw')]
    .melt(id_vars='experiments', var_name='optimiser', value_name='loss')
    .query('experiments <= 18'))

# Make chart
loss_chart = (
    alt.Chart(losses_chart)
    .mark_line(clip=True)
    .encode(x=alt.X('experiments:O'),
            y=alt.Y('loss:Q', scale=alt.Scale(domain=(0, 200))),
            color='optimiser:N')
    .properties(width=300, height=200))
# loss_chart.save('plots/optimiser-losses.png', scale_factor=10.)
loss_chart.save('plots/optimiser-losses.svg')
